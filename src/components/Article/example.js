export const markdown = `
## Hello, markdown
But first, what is the event loop and why should you care?

**feel free to use it!** JavaScript is single-threaded: only one task can run at a time. Usually thatâ€™s no big deal, but now imagine youâ€™re running a task which takes 30 seconds.. Ya.. During that task weâ€™re waiting for 30 seconds before anything else can happen (JavaScript runs on the browserâ€™s main thread by default, so the entire UI is stuck) ðŸ˜¬ Itâ€™s 2019, no one wants a slow, unresponsive website.

Luckily, the browser gives us some features that the JavaScript engine itself doesnâ€™t provide: a Web API. This includes the DOM API, setTimeout, HTTP requests, and so on. This can help us create some async, non-blocking behavior ðŸš€
## Make sure everything is OK
When we invoke a function, it gets added to something called the call stack. The call stack is part of the JS engine, this isnâ€™t browser specific. Itâ€™s a stack, meaning that itâ€™s first in, last out (think of a pile of pancakes). When a function returns a value, it gets popped off the stack ðŸ‘‹

\`\`\` javascript
const timer = () => {
  console.log('OK')
}
\`\`\`
The respond function returns a setTimeout function. The setTimeout is provided to us by the Web API: it lets us delay tasks without blocking the main thread. The callback function that we passed to the setTimeout function, the arrow function () => { return 'Hey' } gets added to the Web API. In the meantime, the setTimeout function and the respond function get popped off the stack, they both returned their values!
`